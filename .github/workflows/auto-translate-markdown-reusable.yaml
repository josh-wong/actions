name: Auto-translate Markdown docs from English to Japanese

on:
  workflow_call:
    inputs:
      output_dir:
        required: false
        type: string
        default: 'docs/ja-jp'
        description: 'Directory where the generated translation will be saved'
      file_extension:
        required: false
        type: string
        default: 'mdx'
        description: 'File extension for the generated documentation file (e.g., md, mdx)'
      source_dir:
        required: false
        type: string
        default: 'docs/en-us'
        description: 'Source directory containing English documents'
      specific_files:
        required: false
        type: string
        default: ''
        description: 'Comma-separated list of specific files to translate (relative to repo root)'
      translate_all:
        required: false
        type: boolean
        default: false
        description: 'Whether to translate all files in the source directory'
    secrets:
      OPENAI_API_KEY_ACTION_TRANSLATE_DOCS:
        required: true
        description: 'API key for OpenAI'

jobs:
  translate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout translation script repository
        uses: actions/checkout@v3
        with:
          repository: josh-wong/actions
          path: translation-tools

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install openai

      - name: Get files to translate based on inputs
        id: get_files
        run: |
          # Priority 1: Specific files specified in inputs
          if [[ -n "${{ inputs.specific_files }}" ]]; then
            echo "Using specifically listed files"
            echo "files=${{ inputs.specific_files }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Priority 2: All files in source directory if translate_all is true
          if [[ "${{ inputs.translate_all }}" == "true" ]]; then
            echo "Translating all files in ${{ inputs.source_dir }}"
            FILES=$(find ${{ inputs.source_dir }} -type f -name "*.md*" | tr '\n' ' ')
            echo "files=${FILES}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Priority 3: Changed files in pull request
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Getting changed files from pull request"
            CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- '${{ inputs.source_dir }}/' | tr '\n' ' ')
            echo "files=${CHANGED}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Priority 4: Recently changed files on the branch (last commit)
          echo "Getting changed files from last commit"
          if [[ -n "${{ github.event.before }}" ]]; then
            COMP_SHA="${{ github.event.before }}"
          else
            # Use HEAD^ if not workflow_dispatch
            COMP_SHA="HEAD^"
          fi
          CHANGED=$(git diff --name-only ${COMP_SHA} HEAD -- '${{ inputs.source_dir }}/' | tr '\n' ' ')
          echo "files=${CHANGED}" >> $GITHUB_OUTPUT

      - name: List files to translate
        run: |
          echo "Files to translate:"
          for file in ${{ steps.get_files.outputs.files }}; do
            echo "- $file"
          done
          
          # Debug information about repository structure
          echo "Current working directory: $(pwd)"
          echo "Repository contents:"
          ls -la

      - name: Translate files
        if: steps.get_files.outputs.files != ''
        env:
          OPENAI_API_KEY_ACTION_TRANSLATE_DOCS: ${{ secrets.OPENAI_API_KEY_ACTION_TRANSLATE_DOCS }}
          OUTPUT_DIR: ${{ inputs.output_dir }}
          FILE_EXTENSION: ${{ inputs.file_extension }}
        run: |
          mkdir -p ${{ inputs.output_dir }}
          for file in ${{ steps.get_files.outputs.files }}; do
            echo "Translating $file"
            python translation-tools/auto-translate-markdown-script/auto-translate.py "$file" "${{ inputs.output_dir }}" "${{ inputs.file_extension }}"
          done

      - name: Debug - List translated files
        run: |
          echo "Contents of ${{ inputs.output_dir }}:"
          if [ -d "${{ inputs.output_dir }}" ]; then
            find "${{ inputs.output_dir }}" -type f -name "*.${{ inputs.file_extension }}" | sort
          else
            echo "Output directory does not exist"
          fi

      - name: Get English PR title
        id: get_pr_title
        if: github.event_name == 'pull_request'
        run: |
          PR_TITLE=$(gh pr view ${{ github.event.pull_request.number }} --json title -q '.title')
          echo "title=${PR_TITLE}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR with translated docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="translate-ja-${{ github.run_id }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b $BRANCH
          git add ${{ inputs.output_dir }}
          # Only commit and create PR if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -m "Translate doc to Japanese"
            git push origin $BRANCH

            if [ "${{ github.event_name }}" == "pull_request" ]; then
              PR_TITLE="[Japanese] ${{ steps.get_pr_title.outputs.title }}"
            else
              PR_TITLE="[Japanese] Translation update"
            fi

            gh pr create --title "$PR_TITLE" \
                        --body "Automated translation of new English doc" \
                        --base ${{ github.ref_name }} \
                        --head $BRANCH
          fi
